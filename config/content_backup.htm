<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Weeks</h1>
<h2>week01-05</h2>
<h4><span><span><span><span>week01-建倉儲</span></span></span></span></h4>
<p><span><span><span><span>1.下載可攜系統</span></span></span></span></p>
<p><span><span><span><span>2.建一個新倉儲“ cd2020”</span></span></span></span></p>
<p><span><span><span><span>3.進入tmp</span></span></span></span></p>
<p><span><span><span><span>4.git clone  </span></span></span></span><a href="https://github.com/s40723234/cd2020.git"><span><span><span><span>https://github.com/s40723234/cd2020.git</span></span></span></span></a></p>
<p><span><span><span><span>5.git子模塊添加</span></span></span></span><a href="https://github.com/mdecourse/cmsimde.git"><span><span><span><span>https://github.com/mdecourse/cmsimde.git</span></span></span></span></a></p>
<p><span><span><span><span>6.進入cmsimde，輸入python -m pip install flask_cors</span></span></span></span></p>
<p><span><span><span><span>7.開始編輯倉儲</span></span></span></span></p>
<p><span><span><span><span>8.處理結束，git status&gt; git add。</span></span></span><span><span><span>&gt; git commit -m“標題”&gt; git push</span></span></span></span></p>
<p><span><span><span><span>9.開啟github倉儲設定，點選要推進的分支</span></span></span></span></p>
<h4><span><span><span><span>week1更新python 3.8.2</span></span></span></span></h4>
<p><span><span><span><span>1.下載3.8.2安裝檔</span></span></span></span></p>
<p><span><span><span><span>2.開啟點擊自定義安裝 </span></span></span></span></p>
<p><span><span><span><span>3.取消點</span></span></span></span></p>
<p><span><span><span><span>4.改路徑至Y槽“ py382”</span></span></span></span></p>
<p><span><span><span><span>5.開編輯器開“ start_mdecourse.bat”</span></span></span></span></p>
<p><span><span><span><span>6.將檔中的py373全部改成py382，重新啟動</span></span></span></span></p>
<p><span><span><span><span>7.於Y槽中執行，python get-pip.py來安裝pip</span></span></span></span></p>
<p><span><span><span><span>8.完成之後，來安裝兩端，輸入pip install flask</span></span></span></span></p>
<p><span><span><span><span>9.</span></span></span><span><span><span>lxml .bs4 .flask_cors .pelican .leo</span></span></span></span></p>
<h4><span><span><span><span>week2-分組</span></span></span></span></h4>
<p><span><span><span><span>以下是直播影片：</span></span></span></span></p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/r0AABAp474U" width="560"></iframe></p>
<h4><span><span><span><span>assignment1-可攜系統</span></span></span></span></h4>
<p><span><span><span><span>step001-先在隨身碟底下創一個CD2020的資料夾，並在裡面創一個data</span></span></span></span></p>
<p><span><span><span><span>step002-在數據下添加資料夾，分別有PortableGit / msys2 / python777 / wscite666 /   </span></span></span></span><span><span><span><span>tmp / home</span></span></span></span></p>
<p><span><span><span><span><span>step003-PortableGit</span></span></span></span></span></p>
<p><span><span>             1. </span><span><span>適用於Windows Portable的</span></span></span><a href="https://git-scm.com/download/win"><span><span>https://git-scm.com/download/win</span></span></a><span><span>下載</span></span><span><span><span>64位 </span></span></span><span><span><span>Git </span></span></span></p>
<p><span><span><span>             2.安裝到CD2020 / data / PortableGit </span></span></span></p>
<p><span><span><span>step004- </span></span></span><span><span><span>MSYS2</span></span></span></p>
<p><span><span><span>            1.  </span></span><a href="https://www.msys2.org/"><span><span>https://www.msys2.org/</span></span></a><span><span>  下載msys2-x86_64-20190524.exe </span></span></span></p>
<p><span><span><span>             2.安裝檔案到CD2020 / data / msys2</span></span></span></p>
<p><span><span><span> step005-python777</span></span></span></p>
<p><span><span><span>            1.  </span></span><a href="https://www.python.org/downloads/release/python-382/"><span><span>https://www.python.org/downloads/release/python-382/</span></span></a><span><span>  下載Windows </span></span></span><span><span><span>x86- 64可執行安裝程序</span></span></span></p>
<p><span><span><span>            2. 安裝並複制檔案到CD2020 / data / python777</span></span></span></p>
<p><span><span><span>steo006-wscite666</span></span></span></p>
<p><span><span><span>          1.到  </span></span><a href="https://www.scintilla.org/SciTEDownload.html"><span><span>https://www.scintilla.org/SciTEDownload.html</span></span></a><span><span>  下載完整的64位下載                </span></span></span></p>
<p><span>           2.解壓縮檔案到 CD2020/data/wscite237輯器執行的 Scite.exe </span></p>
<p><span>           3.打開</span><span>Options 下的 Global Options File 其中的預設值 code.page=0 修改設定</span><span>為 </span><span>code.page=65001，將 load.on.activate=1 前面的井字號拿掉</span></p>
<p>step007 - home</p>
<p>          1.到2019fall/data/home  copy   .gitconfig paste home </p>
<p>step008 - tcc</p>
<p>         1.到 <a href="https://github.com/TinyCC/tinycc">https://github.com/TinyCC/tinycc</a> 接著到命令提示字元裡 git    clone <a href="https://github.com/TinyCC/tinycc.git">https://github.com/TinyCC/tinycc.git</a> tcc</p>
<p>step009 - Jupyterlab</p>
<p><span>         1.命令提示字元裡 pip install jupyterlab==2.0.1 自動安裝</span></p>
<p>step010 - Fossil SCM</p>
<p>       1.到 <a href="https://www.fossil-scm.org/home/doc/trunk/www/index.wiki">https://www.fossil-scm.org/home/doc/trunk/www/index.wiki</a>下載fossil scm</p>
<p>        2.<span>解壓到 CD2020/data</span></p>
<p>step011 - Flutter</p>
<p><span><span><span><span>        1. </span></span></span></span><a href="https://github.com/flutter/flutter"><span><span><span><span>https://github.com/flutter/flutter</span></span></span></span></a><span><span><span><span>  裡</span></span></span></span><span><span><span><span><span>接著到命令提示字元里git  </span></span></span></span></span><span><span><span><span><span>clone https://github.com/flutter/flutter.git -b穩定</span></span></span></span></span></p>
<p><span><span><span><span><span>step012-vscode</span></span></span></span></span></p>
<p><span><span><span><span><span>       1. </span></span></span></span><a href="https://github.com/microsoft/vscode"><span><span><span><span>https://github.com/microsoft/vscode</span></span></span></span></a><span><span><span><span>  接下來到命令提示字元里git </span></span></span></span></span><span><span><span><span><span>clone https://github.com/microsoft/vscode.git vscode</span></span></span></span></span></p>
<p><span><span><span><span>step013-tmp</span></span></span></span></p>
<p><span><span><span><span>        1.git clone自己的倉儲</span></span></span></span></p>
<p><span><span><span><span><span>        2.安裝pip和cmsimde所需模組</span></span></span></span></span></p>
<p><span><span><span><span><span>step014- </span></span></span></span></span></p>
<p><span><span><span><span><span>       1.先到  </span></span></span></span><a href="https://bootstrap.pypa.io/get-pip.py"><span><span><span><span>https://bootstrap.pypa.io/get-pip.py</span></span></span></span></a><span><span><span><span>  下載get-pip.py，並用程式碼自動</span></span></span></span></span><span><span><span><span><span>載入</span></span></span></span></span></p>
<h6><span><img alt="" height="287" src="https://s40723237.github.io/cd2020/images/WgLEB8kAJe.png" width="550"/></span></h6>
<h6>以下是影片</h6>
<p><a href="https://www.youtube.com/watch?v=XbHZMnWAvQI">https://www.youtube.com/watch?v=XbHZMnWAvQI</a>(開cc字幕)</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/XbHZMnWAvQI" width="560"></iframe></p>
<p></p>
<h5>google 雲端</h5>
<p>cd2020隨身系統下載</p>
<p><a href="https://drive.google.com/drive/folders/1s1QXRshHjpgnLKZeQhqlgytk1qDL7aG4?usp=sharing">https://drive.google.com/drive/folders/1s1QXRshHjpgnLKZeQhqlgytk1qDL7aG4?usp=sharing</a></p>
<h2>week06-09</h2>
<h4>week6  OBS</h4>
<p><img alt="" height="111" src="/images/下載.jpg" width="111"/></p>
<p>1.download and install "OBS"</p>
<p>   link: <a href="https://obsproject.com/">https://obsproject.com/</a></p>
<p>2.open and setting hot key</p>
<p>3.新增顯示器畫面與錄製電腦螢幕</p>
<p>4.新增視訊畫面與錄製個人畫面</p>
<h4>OBS與Youtube 直播串流</h4>
<p>1.進到youtube開始直播，設定好相關資訊後會產生串流金鑰</p>
<p>2.接著開啟obs點右下角的開始串流，或者是進入設定找到串流介面</p>
<p>3.進到串流設定介面之後，要把服務位址改成youtube，然後複製youtube直播設定介面產生的串流金鑰，貼上至obs的串流金鑰裡</p>
<p>4.完成串流金鑰設定之後即可點擊youtube右上角開始直播</p>
<h4>assignment 2- topic (翻譯)</h4>
<p>我分工的部分是 : Design Collaboration Better Products</p>
<p>link : <a href="https://drive.google.com/file/d/1YHQwYduSMisiJQS-Jr_HhJghzIqP_SBc/view">https://drive.google.com/file/d/1YHQwYduSMisiJQS-  Jr_HhJghzIqP_SBc/view</a></p>
<p>翻譯部分:<a href="https://github.com/s40723234/cd2020/tree/master/downloads/assignment2">https://github.com/s40723234/cd2020/tree/master/downloads/assignment2</a></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/a69tNWKmC64" width="560"></iframe></span></p>
<h4>week7   Youtobe串流OBS直播 (線上課程)</h4>
<p>本週利用youtube配合obs進行直播線上課程教學，所有組員利用觀看老師直播進行課程，各組組長則是利用meet與老師進行直播。</p>
<h4>week8</h4>
<p><strong>vrep</strong></p>
<p>1.下載  <a href="https://s40723204.github.io/CoppeliaSim_4_Self_Driving_Car_Simulation.7z">CoppeliaSim_4_Self_Driving_Car_Simulation.7z</a> 並解壓縮</p>
<p>2.<a href="https://s40723204.github.io/CoppeliaSim_Edu_V4_0_0_Win.zip">CoppeliaSim_Edu_V4_0_0_Win.zip</a> 並解壓縮</p>
<p>3.到 CoppeliaSim_Edu_V4_0_0_Win 資料夾找到 <strong>coppeliaSim.exe</strong><span> </span>此為新版vrep</p>
<p>4.開啟<strong>coppeliaSim.exe</strong><span><span> 後利用 open scenes 找到 remoteApiCommandServerExample 開啟進行操作，利用旁邊的veches 抓出任一台車來利用上下左右鍵即可操控車子</span></span></p>
<p><span><span>5.利用SciTE開啟 CoppeliaSim_4_Self_Driving_Car_Simulation 資料夾裡 的 car_model.py 檔並按開始即可進行車子的線上操控</span></span></p>
<h4>week9    期中考 (線上課程)</h4>
<p>每位學員利用google meeting  進行直播簡報一到九週所作內容，並於課堂直播同時錄製直播簡報影片，並放置個人學校雲端開啟共享使@gm信箱都擁有權限可觀看影片，並將影片連結丟至自評表單</p>
<p>影片 : https://drive.google.com/open?id=1pZe05da-zyyvRMw7-_0aPkkWFRqQ7uRW</p>
<h2>week10-14</h2>
<h4><span>week10 -google api 設定</span></h4>
<p><span>1.登入gmail (nfu.edu.tw) 帳號，到 <a href="https://console.developers.google.com/">https://console.developers.google.com/</a></span></p>
<p><span>2. 進入並建立專案</span></p>
<p><span>3.到 老師 2020pj1 ，git clone 完整倉儲進 tmp</span></p>
<p><span>4.啟動 api 與 服務，選取 google +domain api (啟用)</span></p>
<p><span>5.選取憑證 ，並同意，選擇內部，應用程序名稱自己修改</span></p>
<p><span>6.在api和服務下，進入憑據 建立"oauth 客戶端id類型"</span></p>
<p><span>7.選擇網路應用程式，選取建立，將帳號與密碼 純入tmp下</span></p>
<p><span> 授權來源:</span></p>
<p><span>javascript: <a href="https://localhost:8443/">https://localhost:8443/</a></span></p>
<p><span>重新定向URL : <a href="https://localhost:8443/login/google/">https://localhost:8443/login/google/</a></span></p>
<p><span>8.啟動leo，將cd2020pj1打開，編輯路徑和名稱</span></p>
<p><span>9.儲存並選取  drawROC，輸入 pip install authomatic</span></p>
<p><span>10.進入倉儲cd2020pj1，輸入 python wsgi.py</span></p>
<h4><span>assignment 03</span></h4>
<p><span>因為本組是採輪流開會制。這次是我開</span></p>
<p>工作分配:</p>
<p>翻譯MSModelingAndTFApproaches:</p>
<p>40723232 1-20</p>
<p>40723234 21-50</p>
<p>40723204 51-80</p>
<p>40723225 81-110</p>
<p>40623115 111-140</p>
<p>40723245 171-207</p>
<p><span>翻譯</span><span>MSModelingAndTFApproaches:</span></p>
<p><span>40723238</span></p>
<p><span>40723210</span></p>
<p><span>翻譯MechEducFutureNeed:</span></p>
<p><span>40723250</span></p>
<p><span>40723210</span></p>
<p><span>翻譯MechaFutureAndChallenges:</span></p>
<p><span>40723212</span></p>
<p>Mechatronic project</p>
<p>40723210</p>
<p>影片連結 :<a href="https://www.youtube.com/watch?v=GmKxlNPx-gs">https://www.youtube.com/watch?v=GmKxlNPx-gs</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GmKxlNPx-gs" width="560"></iframe></p>
<h4><span>assignment 我負責翻譯的部分</span></h4>
<p><span><img alt="" height="750" src="/images/未命名.png" width="471"/></span></p>
<p><span>2.1機電一體化<br/>讓我們研究一下自動駕駛汽車的設計，該自動駕駛汽車可用於在建築物的樓層中導航，並從同一樓層的不同辦公室移動。實現該自動駕駛汽車的設計有兩種主要方法。第一種設計方法遵循經典設計方法。在這種方法中，首先要進行機械設計。在獲得令人滿意的機械設計之後，就設計了電子系統。在最後階段，設計了控制系統。<br/>第二種設計方法是在設計AC的同時要注意每個系統對整體設計的影響。通過這種方法，在設計自動駕駛汽車的機械，電子和控制系統時，要同時考慮每個系統的設計及其對其他兩個系統的影響。<br/>因此，只有在研究了這種設計對電子設計以及控制系統設計的影響之後，才能最終確定機械系統。在這種方法中，每個系統都要考慮三個系統（機械，電子和控制）之間的相互作用以及它們對最終設計和性能的影響。<br/>每個系統的設計步驟。第二種設計方法的好處非常明顯。主要優點之一是可以對每個系統進行最佳設計，從而實現最佳整體性能。在經典設計方法中這是不可能的，因為一旦設計了機械系統，<br/>這將是最終的機械設計。同樣，一旦確定了機械設計（例如所用的材料，設計的尺寸），它將決定並可能限制電子系統中的可用替代方案（所用電動機的尺寸，電動機的位置等）。 ）設計，這反過來也將限制整個系統所使用的儀表和控制系統的替代方案。機電一體化為更好的設計提供了三個系統（機械，電子和控制）的設計之間的相互作用。</span></p>
<p><span><img alt="" height="345" src="/images/1.png" width="320"/></span></p>
<p><span>圖2.1以簡單的方式介紹了機電設計方法。一側箭頭表示設計過程的流程，而兩側箭頭表示最終產品的不同系統的設計之間的交互。雙向箭頭表示需要在設計過程中的任何時間點和正在設計的任何系統上考慮總體設計。他們<br/>意味著設計在任何步驟都可能影響其他系統的設計。<br/>如果刪除了雙向箭頭，我們將獲得經典設計方法，其中不存在任何交互作用。<br/>在文獻中，已經為機電一體化提出了許多定義。這些定義主要取決於在機電一體化的某些方向上工作的一個人或一群人在該領域的視野和研究興趣。在我們看來，機電一體化可以定義為工程學的跨學科領域，其產品設計的功能取決於通過控制方案連接的機械，電氣和電子組件的集成。<br/>如今，機電一體化一詞已享譽全球，許多機電一體化系統都設計用於個人或商業用途。我們日常生活中使用的所有小工具實際上都是機電一體化系統。作為這些小工具的示例，我們提到了筆記本電腦和汽車，其中有許多機電一體化系統<br/>用過的。<br/>機電一體化系統可以看作是一種能夠感知周圍環境並根據收集到的信息做出適當決策的設備。為了感知周圍的環境，需要傳感器，而沒有這些設備，機電一體化系統將無法執行其設計任務。如今，汽車擁有許多機電一體化系統來協助駕駛員進行安全駕駛，其中我們引用：<br/>•安全氣囊<br/>•ABS剎車<br/>• 速度控制<br/>•等<br/>此外，為了採取適當的措施，機電一體化系統需要一個智能算法，該算法可以對一些適當的執行器（例如簡單的開關）進行操作，<br/>直流電動機，步進電動機，交流電動機，液壓電動機或氣動電動機來定位例如我們要控制的機械零件。<br/>機電一體化系統的智能被編程為一種高效的算法，可協調所用設備的所有任務。該算法通常在功能強大的微控制器上運行。<br/>機電一體化系統的設計是一項艱鉅的任務，需要能夠理解系統不同要素的跨學科工程師。每個機電一體化系統的主要組件是：<br/>•機械部分<br/>•傳感器<br/>•執行器<br/>•電子線路<br/>•和程序<br/>作為機電系統的示例，我們引用<br/>•直流電動機的位置控制<br/>•平衡機器人<br/>•移動機器人<br/>•和磁懸浮<br/>這些系統將在本卷中廣泛使用，以說明我們將介紹的重要概念。在介紹這些示例之前，讓我們集中討論機電一體化系統的主要部分，並就如何設計或選擇它們提供一些指導。</span></p>
<h4><span color="#ff0000"><b>以ssh對github連線:</b></span></h4>
<p><span color="#ff0000">(1)到y槽的portablegit將sh_for_solvespace檔案複製並修改成sh.exe</span></p>
<p><span color="#ff0000"><span>(2)進入黑窗輸入sh和</span></span><span><code>ssh-keygen -t rsa -b 4096 -C "使用者學號"</code></span></p>
<p><span face="monospace"><span>(3)下載putty連線工具箱並利用其中的putty.gen創建兩把金鑰</span></span></p>
<p><span face="monospace"><span>(4)修改啟動器中的指令</span></span></p>
<pre><code><span>set GIT_HOME=%Disk%:\portablegit\bin\
set GIT_SSH=%Disk%:\putty\plink.exe</span><br/><br/><span>(5)</span>進入config中更改指令</code><code><span>url = git@github.com:mdecourse/cad2019.git</span>在mdecourse的地方要改成自己的學號</code></pre>
<p><span face="monospace"><span>(6)開啟putty.exe進去設定github.com和proxy位置其中ssh中的auth的地方必須選取剛剛創建的金鑰</span></span></p>
<p><span face="monospace"><span>(7)用編輯器複製課程網站中的step6指令並且儲存放入.ssh資料夾之中</span></span></p>
<p><span face="monospace"><span>(8)進入github並且在setting中的ssh將金鑰開啟並複製放入金鑰設置處</span></span></p>
<h4><span></span></h4>
<h4><span></span>meeting by 40723238</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6sZEjxMWDZI" width="560"></iframe></p>
<p></p>
<h4>meeting by 40723210</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/is_sLTLHV5M" width="560"></iframe></p>
<h2>week15-18</h2>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>